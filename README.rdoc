= Wristband
Author:: {The Working Group, Inc}[http://www.theworkinggroup.ca]
Version:: 1.0.0

The Wristband plug-in simplifies the user authentication process necessary in most web applications.


It handles:

* Login and logout
* Password storage with encryption
* Remember me functionality
* Authority definitions
  
  
== Usage

<b>1.</b> Install the gem
  gem sources -a http://gems.github.com
  sudo gem install theworkinggroup-wristband

<b>2.</b> Run the wristband generator:
  script/generate wristband
  
This will output something like:

  exists  app/models
  create  app/models/user.rb
  create  app/controllers/users_controller.rb
  create  app/views/users/index.html.haml
  exists  app/controllers
  create  app/controllers/sessions_controller.rb
  create  app/views/sessions/new.html.haml
  exists  db/migrate
  exists  db/migrate
  create  db/migrate/001_wristband.rb
  route  specific routes
  route  map.resources :sessions, :users

<b>3.</b> Run migrations
  
  rake db:migrate

<b>4.</b> Add whatever validations you need in your User model

<b>5.</b> Read the documentation on each one of the generated files


== Configuration


=== User model

  class User < ActiveRecord::Base
    wristband [options]
  end

==== Options:

[:login_with] Array of fields you want to authenticate the user with. Default: usename 
  
  wristband :login_with => [:username, :email]


[:before_authentication] Array of functions run after the user authentication takes place. Default: [] 

  wristband :before_authentication => :do_something


[:after_authentication] Array of functions run before the user authentication takes place. Default: [] 

  wristband :after_authentication => :do_something


[:plain_text_password] If true the password won't be encrypted. Default: false 

  wristband :plain_text_password => true

[:has_authorities] The different user authorities are defined in a separate class so as to reduce clutter in the User model itself. Default: false 

  wristband :has_authorities => true

[:roles] Use this to define the different roles the user can assume. Make sure you have a role column on your users table. It will generate functions like <tt>is_<role>?</tt> for each one of the roles youdefine.
  
  wristband :roles => [:regular_user, :admin]
  
  will generate is_regular_user? and is_admin?


==== Remarks:

* While password_crypt is limited to 40 characters, the standard output of the hashing function used to encrypt it, there is no such limit on the length of the password as input by the user.
* There are no default restrictions on the content of the username. These should be added as required.
* A user's password is stored encrypted by default but support for plain- text passwords is also provided. Leaving 'password_salt' as blank or nil means the password is not encrypted. This makes the content of user
fixtures easy to read and understand.
* The 'remember_token' field is used for login authentication via persistent cookie. This value changes each time the user's password is reassigned.


== Functionality

=== 1. Remember me
If you want to automatically login a user when he comes back to your site, add <tt>before_filter :login_from_cookie</tt> to your AplicationController.

=== 2. Authority Definitions

